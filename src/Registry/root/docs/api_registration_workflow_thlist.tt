<!--<div class="page-header">-->
<div class="row">
  <div class="col-sm-12">
    <ul class="breadcrumb">
      <li><a href="/">Home</a></li>
      <li><a>Docs</a></li>
      <li><a>API</a></li>
      <li>Registration</li>
    </ul>
  </div>
</div>

<div class="row">
  <div class="col-sm-3" style="margin-top: 25px;">
    <div id="search-sidebar-left">
        <div class="panel panel-primary">
	  <div class="panel-heading">API Docs</div>
          <div class="panel-body">
	    <ul class="nav nav-list">
	      <li><a href="[% c.uri_for('/docs/apis') %]">TH Registry APIs</a></li>
	      <li><a href="[% c.uri_for('/docs/api/info') %]">Info API</a></li>
	      <li><a>Registration API</a>
	        <ul>
		  <li><a href="[% c.uri_for('/docs/api/registration#authentication') %]">Authentication</a></li>
		  <li>
		    <a href="[% c.uri_for('/docs/api/registration#workflow') %]">A simplified RESTful workflow</a>
		    <ul>
		      <li><a href="[% c.uri_for('/docs/api/registration/workflow/login') %]">Logging in</a></li>
		      <li><a href="[% c.uri_for('/docs/api/registration/workflow/thregister') %]">Registering Track Hubs</a></li>
		      <li><a style="font-weight: bold;">Retrieve list of track hubs</a></li>
		      <li><a href="[% c.uri_for('/docs/api/registration/workflow/thupdate') %]">Updating Track Hubs</a></li>
		      <li><a href="[% c.uri_for('/docs/api/registration/workflow/thdelete') %]">Deleting Track Hubs</a></li>
		      <li><a href="[% c.uri_for('/docs/api/registration/workflow/logout') %]">Log out</a></li>
		    </ul>
		  </li>
		  <li><a href="[% c.uri_for('/docs/api/registration/reference') %]">API Reference</a></li>
		</ul>
	      </li>
	      <li><a href="[% c.uri_for('/docs/api/search') %]">Search API</a></li>
	    </ul>
          </div> 
	</div>
    </div> <!-- sidebar -->
  </div>

  <div class="col-sm-9" style="text-align: justify; text-justify: inter-word;">
  <h2>A Simplified RESTful workflow</h2>

  <h3 id="login">Retrieve the list of registered track hubs</h3>
  <p>
    Suppose you've already submitted some of your public track hubs. At some point, you want to know which ones by retrieving the list of registered track hubs from the Registry, perhaps because you want to update or delete some of them.
  </p>
  <p>
    After logging in, your client can simply get the list of registered track hubs by making a request to the <a href="[% c.uri_for('/docs/api/registration/reference#get_trackhub') %]">GET /api/trackhub</a> endpoint. The response provides overview information on your registered track hubs together with the URIs of their corresponding trackDb entities stored in the Registry.
  </p>

  <h4>Prerequisites</h4>
  <p>
    Verify that:
    <ul>
      <li>your client has successfully <a href="[% c.uri_for('/docs/api/registration/workflow/login') %]">logged in</a> and have, as such, obtained a valid authentication token;</li>
    </ul>
  </p>

  <h4>Procedure</h4>
  <p>
    <ol>
      <li>Make a GET request to the <a href="[% c.uri_for('/docs/api/registration/reference#get_trackhub') %]">/api/trackhub</a> endpoint that includes a <mark>User</mark> header with your username, and an <mark>Auth-Token</mark> header with the given authentication token;</li>
      <li>Examine the response. The response code indicates whether the request succeeded, or how it failed;</li>
      <li>A successful request returns an array of JSON objects representing track hubs whose trackDbs are registered by the user.</li>
    </ol>
  </p>

  <h4>Example: retrieve request and response</h4>
  <p>
    We start from the previous <a href="[% c.uri_for('/docs/api/registration/workflow/thregister') %]">example</a>, where user <mark>exampleuser</mark> submitted one track hub. The client now wants to programatically retrieve a compact representation of the set of its registered track hubs.
  </p>
  <p>
    As already explained, any request to the Registration API must supply the user's credentials with the following headers:
    <pre>
      User: [username]
      Auth-Token: [valid token]
    </pre>
  </p>

  <p>
    The <a href="[% c.uri_for('/docs/api/registration/reference#get_trackhub') %]">GET /api/trackhub</a> endpoint does not accept parameters, so the request in this case is very simple:
  </p>
  <p>
    Request:
    <pre>
      GET https://www.trackhubregistry.org/api/trackhub
      User: exampleuser
      Auth-Token: 6l5/GuIiOSCywuSI9HF1VU97clwb/CXPDFS0MyAB/HCZuxtjQBj4uORZL8NY3Yhi
    </pre>
  </p>
  <p>
    If the request is successful, the response body is an array of JSON objects, one for each track hub submitted by the user:
  </p>
  <p>
    Response:
    <pre>
      200 OK
      Content-type: application/json; charset=utf-8
      ...
      [
        {
          'name': 'cshl2013',
          'shortLabel': 'Plants',
          'longLabel': 'CSHL Biology of Genomes meeting 2013 demonstration assembly hub',
          'url': 'http://genome-test.cse.ucsc.edu/~hiram/hubs/Plants/hub.txt',
          'trackdbs': [
                            {
                              'species': '3988',
                              'assembly': 'GCA_000151685.2',
                              'uri': 'https://www.trackhubregistry.org/api/trackdb/KRBr5PS7RmapaFr7ofpTBA'
                            },
                            {
                              'species': '3711',
                              'assembly': 'GCA_000309985.1',
                              'uri': 'https://www.trackhubregistry.org/api/trackdb/FOEM87nETMOCOglmm0sSsg'
                            },
                            {
                              'species': '3702',
                              'assembly': 'GCA_000001735.1',
                              'uri': 'https://www.trackhubregistry.org/api/trackdb/hB8Npdm1ST2gBwkbQThkVg'
                            }
                        ]
        }
      ]
    </pre>
    In our example, the client had previously registered one single hub, the <a target="_blank" href="http://genome-test.cse.ucsc.edu/~hiram/hubs/Plants/hub.txt">CSHL Biology of Genomes meeting 2013 demonstration assembly hub</a>, so the response body is an array with one component representing this hub. The track hub object has some string attributes derived from parsing the remote hub URL specified in the url attribute.
  </p>
  <p>
    As can be seen from the response output, the track hub object contains an array, trackdbs, which is a list of objects containing information for each trackDb (i.e. assembly specific data files) associated with the track hub: the species NCBI tax id and assembly accession, and the URI of the JSON representation of the stored trackDb entity which can be retrieved from the Registry by making a GET request to the <a href="[% c.uri_for('/docs/api/registration/reference#get_trackdb') %]">/api/trackdb/:id</a> endpoint.
  </p>

  <h4 id="errors">What can possibly go wrong</h4>
  <p>
    Remember: <u>always check the response code</u> since it indicates whether the request succeeded, or how it failed.
    <ul>
      <li>if the request is successful, the server returns HTTP response code 200 (OK)</li>
      <li>if the credentials supplied in the authentication header are invalid, the server returns HTTP response code 401</li>
      <li>if the Registry encountered an unexpected condition which prevented it from fulfilling the request, it returns HTTP response code 500</li>
      <li>if the Registry is currently unable to handle the request due to a temporary overloading or maintenance, it returns HTTP response code 503</li>
    </ul>
  </p>
  
  <h4>Example Clients</h4>
  
  <ul class="nav nav-pills">
    <li class="active"><a href="#perl" data-toggle="tab">Perl</a></li>
    <li><a href="#python2" data-toggle="tab">Python2</a></li>
    <li><a href="#python3" data-toggle="tab">Python3</a></li>
    <li><a href="#ruby" data-toggle="tab">Ruby</a></li>
    <li><a href="#curl" data-toggle="tab">Curl</a></li>
  </ul>
  <div class='tab-content'>
    <div class='tab-pane active' id='perl'>
      <pre class="pre-scrollable prettyprint linenums">
use strict;
use warnings;

use JSON;
use HTTP::Request::Common;
use LWP::UserAgent;

my $ua = LWP::UserAgent->new(ssl_opts => { verify_hostname => 0 });
my $server = 'https://www.trackhubregistry.org';
my ($user, $pass, $auth_token) = ('exampleuser', 'examplepass');

$auth_token = login($server, $user, $pass);

my $request = GET("$server/api/trackhub");
$request->headers->header(user       => $user);
$request->headers->header(auth_token => $auth_token);
my $response = $ua->request($request);
if ($response->is_success) {
  use Data::Dumper;
  local $Data::Dumper::Terse = 1;
  local $Data::Dumper::Indent = 1;
  print "Registered track hubs\n", Dumper from_json($response->content);
} else {
  die sprintf "Couldn't get list of registered trackhubs: %s [%d]", $response->content, $response->code;
} 

logout($server, $user, $auth_token);

sub login {
  my ($server, $user, $pass) = @_;

  my $request = GET("$server/api/login");
  $request->headers->authorization_basic($user, $pass);
  
  my $response = $ua->request($request);
  my $auth_token;
  if ($response->is_success) {
    $auth_token = from_json($response->content)->{auth_token};
    print "Logged in [$auth_token]\n" if $auth_token;
  } else {
    die sprintf "Couldn't login: %s [%d]", $response->content, $response->code;
  }

  return $auth_token;
}

sub logout {
  my ($server, $user, $auth_token) = @_;

  my $request = GET("$server/api/logout");
  $request->headers->header(user       => $user);
  $request->headers->header(auth_token => $auth_token);

  my $response = $ua->request($request);
  if ($response->is_success) {
    print "Logged out\n";
  } else {
    die sprintf "Unable to logout: %s [%d]", $response->content, $response->code;
  } 
}
      </pre> 
    </div>

    <div class='tab-pane' id='python2'>
      <pre class="pre-scrollable prettyprint linenums">
import requests, sys

server = 'https://www.trackhubregistry.org'
user = 'exampleuser'
password = 'examplepass'

def login(server, user, password):
    r = requests.get(server+'/api/login', auth=(user, password), verify=False)
    if not r.ok:
        print "Couldn't login, reason: %s [%d]" % (r.text, r.status_code)
        sys.exit

    auth_token = r.json()[u'auth_token']
    print 'Logged in [%s]' % auth_token
    return auth_token

def logout(server, user, auth_token):
    r = requests.get(server+'/api/logout', headers={ 'user': user, 'auth_token': auth_token })    
    if not r.ok:
       print "Couldn't logout, reason: %s [%d]" % (r.text, r.status_code)
       sys.exit
    print 'Logged out'

auth_token = login(server, user, password)
r = requests.get(server+'/api/trackhub', headers={ 'user': user, 'auth_token': auth_token }, verify=False)
if not r.ok:
   print "Couldn't get list of registred trackhubs, reason: %s [%d]" % (r.text, r.status_code)
   sys.exit
print repr(r.json())

logout(server, user, auth_token)
      </pre>
    </div>

    <div class='tab-pane' id='python3'>
      <pre class="pre-scrollable prettyprint linenums">
import requests, sys

server = 'https://www.trackhubregistry.org'
user = 'exampleuser'
password = 'examplepass'

def login(server, user, password):
    r = requests.get(server+'/api/login', auth=(user, password), verify=True)
    if not r.ok:
        print("Couldn't login, reason: %s [%d]" % (r.text, r.status_code))
        sys.exit

    auth_token = r.json()[u'auth_token']
    print('Logged in [%s]' % auth_token)
    return auth_token

def logout(server, user, auth_token):
    r = requests.get(server+'/api/logout', headers={ 'user': user, 'auth_token': auth_token })    
    if not r.ok:
       print("Couldn't logout, reason: %s [%d]" % (r.text, r.status_code))
       sys.exit
    print('Logged out')

auth_token = login(server, user, password)
r = requests.get(server+'/api/trackhub', headers={ 'user': user, 'auth_token': auth_token }, verify=True)
if not r.ok:
   print("Couldn't get list of registred trackhubs, reason: %s [%d]" % (r.text, r.status_code))
   sys.exit
print(repr(r.json()))

logout(server, user, auth_token)
      </pre>
    </div>

<!-- RUBY EXAMPLE -->
    <div class='tab-pane' id='ruby'>
      <pre class="pre-scrollable prettyprint linenums">
require 'net/https'
require 'uri'

require 'rubygems'
require 'json'

server = 'https://www.trackhubregistry.org'
user = 'exampleuser'
pass = 'examplepass'

def login(user, pass)
  request = Net::HTTP::Get.new('/api/login')
  request.basic_auth(user, pass)
  response = $http.request(request)
  
  if response.code != "200"
    puts "Couldn't login, reason: #{response.body} [#{response.code}]"
    exit
  end

  result = JSON.parse(response.body)
  puts "Logged in [#{result["auth_token"]}]"
  
  return result["auth_token"]
end

def logout(user, auth_token)
  request = Net::HTTP::Get.new('/api/logout', { 'User' => user, 'Auth-Token' => auth_token })
  response = $http.request(request)
 
  if response.code != "200"
    puts "Invalid response: #{response.code}"
    puts response.body
    exit
  end

  puts 'Logged out'
end
      
url = URI.parse(server)
$http = Net::HTTP.new(url.host, url.port)
$http.use_ssl = true
$http.verify_mode = OpenSSL::SSL::VERIFY_NONE

auth_token = login(user, pass)

request = Net::HTTP::Get.new('/api/trackhub', { 'Content-Type' => 'application/json', 'User' => user, 'Auth-Token' => auth_token })
response = $http.request(request)
if response.code != "200"
  puts "Invalid response: #{response.code} #{response.body}"
  exit
end

puts response.body

logout(user, auth_token)

      </pre>
    </div>

<!-- CURL EXAMPLE -->
    <div class='tab-pane' id='curl'>
<pre class="pre-scrollable prettyprint linenums">
curl -X GET "https://www.trackhubregistry.org/api/trackhub" \
     -H "User: exampleuser" \
     -H "Auth-Token: 6l5/GuIiOSCywuSI9HF1VU97clwb/CXPDFS0MyAB/HCZuxtjQBj4uORZL8NY3Yhi" 
      
      
      
      
      
      </pre>
     </div>




  </div>

  </div>
</div>
